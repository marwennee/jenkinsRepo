pipeline {
    environment {
        NAME = "back--svc--1"
        NAMESPACE = "testing"
        PROJECT ="marwennee/back-service-1.git"
        VERSION = "2"
        REGISTRY = 'marwenguesmii/nodejsapp'
        REGISTRY_CREDENTIAL = 'dockerhub'
        HELM_REPO = "https://github.com/marwennee/HelmCharts.git"
        HELM_FOLDER = "helm_back_1"
    }
    agent {
        kubernetes {
            yaml '''
                spec:
                    containers:
                        - name: helm
                          image: alpine/helm:3.6.3
                          command:
                            - cat
                          tty: true
                        - name: kaniko
                          image: gcr.io/kaniko-project/executor:debug
                          imagePullPolicy: Always
                          command:
                          - sleep
                          args:
                          - 9999999
                          volumeMounts:
                          - name: jenkins-docker-cfg
                            mountPath: /kaniko/.docker
                    volumes:
                    - name: jenkins-docker-cfg
                        projected:
                        sources:
                        - secret:
                            name: docker-credentials (1)
                            items:
                                - key: .dockerconfigjson
                                path: config.json
                '''
        }
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM',
                branches: [[name: '*/main']],
                doGenerateSubmoduleConfigurations: false,
                extensions: [[$class: 'CheckoutOption', timeout: 23], [$class: 'CloneOption', noTags: true, reference: '', shallow: false, timeout: 90]] ,
                submoduleCfg: [],
                userRemoteConfigs: [[credentialsId: 'github',
                url: "https://www.github.com/$PROJECT"]]])
            }
        }

        stage('K8S') {
            steps {
                withKubeConfig([credentialsId: "kubeconfig"]) {
                    sh 'curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.20.7/bin/linux/amd64/kubectl"'  
                    sh 'chmod u+x ./kubectl'  
                    sh './kubectl get pods'
                }
            }
        }

        stage('Docker Build & Publish') {
            steps {
                script {
                    withDockerRegistry([credentialsId: "${REGISTRY_CREDENTIAL}", url: ""]) {
                        sh "ls -l"
                        docker.build('${REGISTRY}:${VERSION}').push('latest')
                    }
                    
                }
            }
        }
        stage('Checkout SCM: HELM CHART'){
            steps {
                checkout(scm: [
                    $class: 'GitSCM', branches: [[name: '*/main']],
                    userRemoteConfigs: [[url: "${HELM_REPO}", name: "origin", credentialsId:'github']]
                ])
            }
        }

        stage('Kubernetes Deploy') {
            steps {
                container('helm') {
                    script {
                        try {
                            sh "helm upgrade --set image.tag=${VERSION} -n ${NAMESPACE}  ${NAME} ./${HELM_FOLDER}"
                        } catch( Exception e){
                            sh "helm install --replace --set image.tag=${VERSION} --set metadata.namespace=${NAMESPACE} --create-namespace -n ${NAMESPACE}  ${NAME} ./${HELM_FOLDER}"
                        }
                    }
                    
                }
            }
        }        


    }
}
