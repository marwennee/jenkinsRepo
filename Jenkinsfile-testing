pipeline {
    environment {
        NAME = "front--svc"
        NAMESPACE = "testing"
        VERSION = env.GIT_COMMIT.take(7)
        REGISTRY = 'marwenguesmii/angular_nginx'
        REGISTRY_CREDENTIAL = 'dockerhub'
        HELM_REPO = "https://github.com/marwennee/HelmCharts.git"
        PROJECT_REPO = "https://github.com/marwennee/front-service.git"
        HELM_FOLDER = "helm-front"
    }
    agent {
        kubernetes {
            yaml '''
                spec:
                    containers:
                        - name: docker
                          image: docker:19.03
                          command:
                            - cat
                          tty: true
                          privileged: true
                          volumeMounts:
                            - name: dockersock
                              mountPath: /var/run/docker.sock
                        - name: helm
                          image: alpine/helm:3.6.3
                          command:
                            - cat
                          tty: true
                    volumes:
                        - name: dockersock
                          hostPath:
                            path: /var/run/docker.sock
                '''
        }
    }

    stages {
        stage('Checkout SCM: PROJECT CODE'){
            steps {
                checkout(scm: [
                    $class: 'GitSCM', branches: [[name: '*/main']],
                    userRemoteConfigs: [[url: "${PROJECT_REPO}", name: "origin", credentialsId:'github']]
                ])
                sh "git status"
            }
        }
        stage('Docker Build') {

            steps {
                container('docker') {
                    sh "docker build -t ${REGISTRY}:${VERSION} ."
                }
            }
        }

        stage('Docker Publish') {
            steps {
                container('docker') {
                    withDockerRegistry([credentialsId: "${REGISTRY_CREDENTIAL}", url: ""]) {
                        sh "docker push ${REGISTRY}:${VERSION}"
                    }
                }
            }
        }

        stage('Checkout SCM: HELM CHART'){
            steps {
                checkout(scm: [
                    $class: 'GitSCM', branches: [[name: '*/main']],
                    userRemoteConfigs: [[url: "${HELM_REPO}", name: "origin", credentialsId:'github']]
                ])
            }
        }

        stage('Kubernetes Deploy') {
            steps {
                container('helm') {
                    script {
                        try {
                            sh "helm upgrade --force --set image.tag=${VERSION} -n ${NAMESPACE}  ${NAME} ./${HELM_FOLDER}"
                        } catch( Exception e){
                            sh "helm install --replace --set image.tag=${VERSION} --set metadata.namespace=${NAMESPACE} --create-namespace -n ${NAMESPACE}  ${NAME} ./${HELM_FOLDER}"
                        }
                    }
                    
                }
            }
        }        


    }
}
